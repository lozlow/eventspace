;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name eventspace.core, :imports {History goog.History}, :requires {eventspace.menu.core eventspace.menu.core, eventspace.handlers eventspace.handlers, reagent reagent.core, menu eventspace.menu.core, reagent.session reagent.session, session reagent.session, reagent.core reagent.core, space eventspace.space.core, eventspace.subscriptions eventspace.subscriptions, History goog.History, eventspace.space.core eventspace.space.core, eventspace.database eventspace.database, re-frame.core re-frame.core}, :uses {atom reagent.core, dispatch-sync re-frame.core}, :defs {mount-components {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/src-cljs/eventspace/core.cljs", :line 16, :column 7, :end-line 16, :end-column 23, :arglists (quote ([]))}, :name eventspace.core/mount-components, :variadic false, :file "src-cljs/eventspace/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init! {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/src-cljs/eventspace/core.cljs", :line 20, :column 16, :end-line 20, :end-column 21, :export true, :arglists (quote ([]))}, :name eventspace.core/init!, :variadic false, :file "src-cljs/eventspace/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:initialise-database}, :order [:initialise-database]}, :doc nil}