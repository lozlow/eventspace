;; Analyzed by ClojureScript 0.0-3269
{:name re-frame.subs, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {groupEnd re-frame.utils, log re-frame.utils, app-db re-frame.db, group re-frame.utils, warn re-frame.utils, make-reaction reagent.ratom, first-in-vector re-frame.utils}, :requires {reagent.ratom reagent.ratom, re-frame.db re-frame.db, re-frame.utils re-frame.utils}, :imports nil, :defs {key->fn {:name re-frame.subs/key->fn, :file "resources/public/js/out/re_frame/subs.cljs", :line 9, :column 1, :end-line 9, :end-column 23, :private true, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/subs.cljs", :line 9, :column 16, :end-line 9, :end-column 23, :private true}}, register {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/subs.cljs", :line 12, :column 7, :end-line 12, :end-column 15, :arglists (quote ([key-v handler-fn])), :doc "register a hander function for an id"}, :name re-frame.subs/register, :variadic false, :file "resources/public/js/out/re_frame/subs.cljs", :end-column 15, :method-params ([key-v handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-v handler-fn])), :doc "register a hander function for an id"}, subscribe {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/subs.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([v])), :doc "returns a reagent/reaction which observes a part of app-db"}, :name re-frame.subs/subscribe, :variadic false, :file "resources/public/js/out/re_frame/subs.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "returns a reagent/reaction which observes a part of app-db"}}}