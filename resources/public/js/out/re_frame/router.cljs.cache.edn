;; Analyzed by ClojureScript 0.0-3269
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{flush}, :name re-frame.router, :imports nil, :requires {reagent.core reagent.core, re-frame.handlers re-frame.handlers, re-frame.utils re-frame.utils, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, flush reagent.core, warn re-frame.utils, handle re-frame.handlers, put! cljs.core.async}, :defs {event-chan {:name re-frame.router/event-chan, :file "resources/public/js/out/re_frame/router.cljs", :line 14, :column 1, :end-line 14, :end-column 26, :private true, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/router.cljs", :line 14, :column 16, :end-line 14, :end-column 26, :private true}}, dispatch {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/router.cljs", :line 41, :column 7, :end-line 41, :end-column 15, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])\n  "}, :name re-frame.router/dispatch, :variadic false, :file "resources/public/js/out/re_frame/router.cljs", :end-column 15, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])\n  "}, dispatch-sync {:protocol-inline nil, :meta {:file "/Users/peteshaw/git/eventspace/resources/public/js/out/re_frame/router.cljs", :line 54, :column 7, :end-line 54, :end-column 20, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])"}, :name re-frame.router/dispatch-sync, :variadic false, :file "resources/public/js/out/re_frame/router.cljs", :end-column 20, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :flush-dom}, :order [:recur :flush-dom :else]}, :doc nil}